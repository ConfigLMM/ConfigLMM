
server {

    <% if config['NginxVersion'] >= 1.25 %>
        <% if !config['TLS'] %>
            listen       <%= config['Port'] %>;
            listen  [::]:<%= config['Port'] %>;
        <% else %>
            listen       <%= config['Port'] %> ssl;
            listen  [::]:<%= config['Port'] %> ssl;

            include config-lmm/ssl.conf;
        <% end %>
        http2 on;
        http3 on;
        quic_retry on;
        add_header Alt-Svc 'h3=":443"; ma=86400';
    <% else %>
        <% if !config['TLS'] %>
            listen       <%= config['Port'] %>;
            listen  [::]:<%= config['Port'] %>;
        <% else %>
            listen       <%= config['Port'] %> ssl http2;
            listen  [::]:<%= config['Port'] %> ssl http2;

            include config-lmm/ssl.conf;
        <% end %>
    <% end %>

    server_name <%= config['Domain'] %>;

    <% if config['Root'] %>
        root               <%= config['Root'] %>;
    <% end %>

    access_log  /var/log/nginx/gollum.access.log;
    error_log   /var/log/nginx/gollum.error.log;

    <% if config['AuthentikDomain'].nil? %>
        include config-lmm/private.conf;
    <% end %>

    include config-lmm/errors.conf;

    <% if config['CertName'] %>
        ssl_certificate "/etc/letsencrypt/live/<%= config['CertName'] %>/fullchain.pem";
        ssl_certificate_key "/etc/letsencrypt/live/<%= config['CertName'] %>/privkey.pem";
        ssl_trusted_certificate "/etc/letsencrypt/live/<%= config['CertName'] %>/chain.pem";
    <% end %>

    <% if config['Passenger'] %>
        passenger_app_root /srv/gollum;

        try_files    $uri @Passenger;

        location @Passenger {
            passenger_enabled on;
            passenger_min_instances 1;
            rails_env production;

            #passenger_set_cgi_param HTTP_X_FORWARDED_PROTO https;
            #limit_req zone=one burst=5;
        }
    <% else %>
        location / {
            proxy_pass <%= config['Server'] %>;

            <% if config['AuthentikDomain'] %>
                error_page       401 = @authenticate;
                include config-lmm/errors.conf;

                auth_request     /outpost.goauthentik.io/auth/nginx;

                # translate headers from the outposts back to the actual upstream
                auth_request_set $authentik_username $upstream_http_x_authentik_username;
                auth_request_set $authentik_groups $upstream_http_x_authentik_groups;
                auth_request_set $authentik_email $upstream_http_x_authentik_email;
                auth_request_set $authentik_name $upstream_http_x_authentik_name;
                auth_request_set $authentik_uid $upstream_http_x_authentik_uid;

                proxy_set_header REMOTE_USER $authentik_username;
                proxy_set_header REMOTE_GROUPS $authentik_groups;
                proxy_set_header REMOTE_EMAIL $authentik_email;
                proxy_set_header REMOTE_NAME $authentik_name;
                proxy_set_header REMOTE_UID $authentik_uid;
            <% end %>

            include config-lmm/proxy.conf;
        }
    <% end %>

    <% if config['AuthentikDomain'] %>
        location /outpost.goauthentik.io {
            proxy_pass              https://<%= config['AuthentikDomain'] %>/outpost.goauthentik.io;
            proxy_ssl_protocols     TLSv1.2 TLSv1.3;
            proxy_set_header        X-Original-URL $scheme://$http_host$request_uri;
            proxy_pass_request_body off;
            proxy_set_header        Content-Length "";
        }

        location @authenticate {
            internal;
            return 302 /outpost.goauthentik.io/start?rd=$request_uri;
        }
    <% end %>
}
